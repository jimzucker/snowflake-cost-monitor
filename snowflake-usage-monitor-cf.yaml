AWSTemplateFormatVersion: "2010-09-09"
Description: "Template for creating API Gateway and Lambda function for Snowflake external functions"

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

Parameters:
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[-a-z0-9]+$"
    Default: "snowflake-usage-monitor-stage"
    Description: "API deployment stage"

  lambdaName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "snowflake-usage-monitor-lambda"
    Description: "Lambda instance name"

  apiGatewayType:
    Type: "String"
    Default: "REGIONAL" 
    AllowedValues:
      - "REGIONAL"
      - "PRIVATE"
    Description: "API Gateway type to create"

  apiGatewayName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "snowflake-usage-monitor-api"
    Description: "API Gateway instance name"

  apiGatewayIAMRoleName:
    Type: "String"
    Default: "snowflake-usage-monitor-agw-role"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Description: "Role used with Snowflake API Integration"

  lambdaExecutionRoleName:
    Type: "String"
    Default: "snowflake-usage-monitor-lambda-role"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Description: "Role used by the Lambda."

  sourceVpcId:
    Type: "String"
    Default: ""
    Description: "Snowflake VPC that has access to private API Gateway. Used only when creating a private API Gateway"

  slackUrlParameter:
    NoEcho: true
    Type: String
    Default: ""
    Description: Enter Incoming Webhook URL of Slack Channel
  
  teamsUrlParameter:
    NoEcho: true
    Type: String
    Default: ""
    Description: Enter Incoming Webhook URL of Teams Channel

Conditions:
  shouldCreateRegionalGateway: 
    !Equals [!Ref apiGatewayType, "REGIONAL"]

Resources:

  snowflakeSecretManager:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: snowflake_secret_manager
      SecretString: !Join [ '', [ '{"slack_url": "', !Ref slackUrlParameter, '", "teams_url": "', !Ref teamsUrlParameter, '"}' ]]

  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    DependsOn : apiIAMRole
    Properties:
      Name: !Ref "apiGatewayName"
      Description: "Snowflake external functions Gateway"
      Policy: !Sub  
          - '{ "Version": "2012-10-17", "Statement": [ {  "Effect": "Allow", "Principal": { "AWS": "arn:aws:sts::${AWS::AccountId}:assumed-role/${apiGatewayIAMRoleName}/snowflake" }, "Action": "execute-api:Invoke", "Resource": "${resourceArn}" , "Condition": { ${vpcCondition} } } ] }'
          - resourceArn : !Join [ "", [ "execute-api:/", "*" ] ]
            vpcCondition: !If 
              - shouldCreateRegionalGateway
              - ""
              - !Sub '"StringEquals": { "aws:sourceVpc": "${sourceVpcId}"}'
      EndpointConfiguration:
        Types:
          - !Ref apiGatewayType

  apiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt 
        - apiGateway
        - RootResourceId
      PathPart: slack_post
      
  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !Ref "apiResource"
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: !Ref "apiGatewayStageName"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn : lambdaExecutionIAMRole
    Properties:
      Code:
        ZipFile: |
          import urllib.request
          import boto3
          import json
          import logging

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger()

          SECRET_MANAGER = "snowflake_secret_manager"
          REGION = "us-east-1"
          SLACK_SECRET_KEY_NAME = "slack_url"
          TEAMS_SECRET_KEY_NAME = "teams_url"


          def get_secret(secret_name: str, region_name: str) -> str:
              session = boto3.session.Session()
              client = session.client("secretsmanager", region_name=region_name)
              secret = client.get_secret_value(SecretId=secret_name)["SecretString"]
              return secret


          def send_slack_message(slack_url: str, message: str):
              message = "```" + message + "```"
              data = json.dumps({"text": message}).encode("utf-8")
              req = urllib.request.Request(slack_url, data=data, headers={"Content-Type": "application/json"})
              with urllib.request.urlopen(req) as response:
                  if response.status == 200:
                      logger.info("Slack message posted successfully")
                  else:
                      logger.error("Failed to post to Slack. Response: %s", response.read().decode("utf-8"))


          def send_teams_message(teams_url: str, message: str):
              message = "```\n" + message + "\n```"
              data = json.dumps({"text": message}).encode("utf-8")
              req = urllib.request.Request(teams_url, data=data, headers={"Content-Type": "application/json"})
              with urllib.request.urlopen(req) as response:
                  if response.status == 200:
                      logger.info("Teams message posted successfully")
                  else:
                      logger.error("Failed to post to Teams. Response: %s", response.read().decode("utf-8"))


          def handler(event, context):
              result = []
              status_code = 200
              try:
                  event_body = json.loads(event["body"])
                  rows = event_body["data"]

                  account_width = 19
                  forecast_width = 12

                  for idx, row in enumerate(rows):
                      if idx == 0:
                          database, forecast, change = row[1:]
                          header = f"{'Account'.ljust(account_width)} | {'Forecast*'.ljust(forecast_width)} | {'Change'.strip()}"
                          result.append(header)
                          divider = "-" * len(header)
                          result.append(divider)

                      database, forecast, change = row[1:]
                      if not database.endswith("(GB)"):
                          forecast = f"${forecast}"
                      else:
                          forecast = str(forecast)
                      str_forecast = str(forecast).ljust(forecast_width)
                      result.append(f"{database.ljust(account_width)} | {str_forecast} | {change.strip()}")

                  secret = get_secret(SECRET_MANAGER, REGION)
                  result.append("* Forecast components may be Â±15-25%")

                  slack_url = json.loads(secret)[SLACK_SECRET_KEY_NAME]
                  send_slack_message(slack_url, '\n'.join(result))

                  teams_url = json.loads(secret)[TEAMS_SECRET_KEY_NAME]
                  send_teams_message(teams_url, '\n'.join(result))

              except Exception as err:
                  status_code = 400

              return {"statusCode": status_code}
      Description: "Echo Lambda created from CloudFormation template"
      FunctionName: !Ref "lambdaName"
      Handler: "index.handler"
      Role: !GetAtt "lambdaExecutionIAMRole.Arn" 
      Runtime: "python3.9"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"

  apiIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName : !Ref "apiGatewayIAMRoleName"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"

  lambdaExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName : !Ref "lambdaExecutionRoleName"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
      - PolicyName: SecretsManagerReadPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref snowflakeSecretManager

      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"  


Outputs:
  resourceInvocationUrl:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}/echo"

  awsRoleArn:
    Value: !GetAtt "apiIAMRole.Arn"
